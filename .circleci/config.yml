version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
  
jobs:
  build-lint:
    docker:
    # Use the same Docker base as the project
    - image: cimg/node:12.22.4

    # working_directory: ~/app

    steps:
      - checkout

      - run:
          name: install dependencies
          command: |

              sudo yarn install --production
              sudo yarn upgrade
              # Install hadolint
              sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              sudo chmod +x /bin/hadolint

      - run:
          name: run lint
          command: |
              sudo hadolint Dockerfile
              sudo yarn test
      
      - save_cache:
          paths:
            - ~/app
          key: build-cache
    
  build-push-docker-image:
      docker:
      # Use the same Docker base as the project
      - image: circleci/golang:1.15

      # working_directory: ~/app

      steps:
        - checkout
        - setup_remote_docker:
            version: 19.03.13

        - run:
            name: set up image tag
            command: echo "export TAG=circleci-commit-${CIRCLE_SHA1}" >> $BASH_ENV
        - run:
            name: create docker image and push to dockerhub
            command: |
              TAG=commit-${CIRCLE_SHA1:0:7}
              docker build -t $DOCKER_USER/capstone-app:$TAG .
              echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
              docker push $DOCKER_USER/capstone-app:$TAG

  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          node-type: t2.small
          nodes-max: 2
          
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          # get-rollout-status: true
          resource-file-path: deployment.json
          resource-name: deployment/capstone-app

workflows:
  default:
    jobs:
      - build-lint
      - build-push-docker-image:
          requires: 
            - build-lint
      - create-cluster:
          cluster-name: capstone-eks-app
          requires:
            - build-push-docker-image
      - test-cluster:
          cluster-name: capstone-eks-app
          requires:
            - create-cluster
      - create-deployment:
          cluster-name: capstone-eks-app
          requires:
            - test-cluster
      - aws-eks/update-container-image:
          cluster-name: capstone-eks-app
          container-image-updates: 'capstone=josemay343/capstone-app:commit-${CIRCLE_SHA1:0:7}'
          record: true
          requires:
            - create-deployment
          resource-name: deployment/capstone-app

      # - aws-eks/delete-cluster:
      #     cluster-name: my-eks-demo
      #     requires:
      #       - test-cluster
